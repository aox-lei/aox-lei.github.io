<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Prince's Blog - Mysql</title><link href="http://www.phpue.com/" rel="alternate"></link><link href="http://www.phpue.com/feeds/mysql.atom.xml" rel="self"></link><id>http://www.phpue.com/</id><updated>2017-10-02T00:00:00+08:00</updated><entry><title>Mysql 分区介绍(一) ——概述</title><link href="http://www.phpue.com/mysql/mysql-partition.html" rel="alternate"></link><published>2017-10-02T00:00:00+08:00</published><updated>2017-10-02T00:00:00+08:00</updated><author><name>Prince</name></author><id>tag:www.phpue.com,2017-10-02:/mysql/mysql-partition.html</id><summary type="html">&lt;h2&gt;一、分区类型&lt;/h2&gt;
&lt;h3&gt;1. RANGE类型(范围分区)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过范围的方式进行分区, 为每个分区给出一定的范围, 范围必须是连续的并且不能重复, 使用VALUES LESS THAN操作符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;啥意思呢? 就是range类型就是一种范围, 比如, 从1-10, 11-20, 21-30这种的方式分区, 1-10就在一个分区里, 11-20是另外一个分区, 但是看起来他们还是同一个表 &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;咱们看一个创建的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE `t1` (
  `id` int(11) NOT NULL,
  `uid` int(11) NOT NULL COMMENT &amp;#39;用户id&amp;#39;,
  `score` int(3) NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;分数&amp;#39;,
  PRIMARY KEY (`id`,`score`)
) ENGINE …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;一、分区类型&lt;/h2&gt;
&lt;h3&gt;1. RANGE类型(范围分区)&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过范围的方式进行分区, 为每个分区给出一定的范围, 范围必须是连续的并且不能重复, 使用VALUES LESS THAN操作符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;啥意思呢? 就是range类型就是一种范围, 比如, 从1-10, 11-20, 21-30这种的方式分区, 1-10就在一个分区里, 11-20是另外一个分区, 但是看起来他们还是同一个表 &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;咱们看一个创建的例子&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE `t1` (
  `id` int(11) NOT NULL,
  `uid` int(11) NOT NULL COMMENT &amp;#39;用户id&amp;#39;,
  `score` int(3) NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;分数&amp;#39;,
  PRIMARY KEY (`id`,`score`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8
PARTITION BY RANGE (score)
(PARTITION p0 VALUES LESS THAN (10) ENGINE = InnoDB,
 PARTITION p1 VALUES LESS THAN (20) ENGINE = InnoDB,
 PARTITION p2 VALUES LESS THAN (30) ENGINE = InnoDB,
 PARTITION p3 VALUES LESS THAN (40) ENGINE = InnoDB)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建了个t1表, 并且t1有四个分区, 第一个分区p0的范围是小于10的, 第二个是小于20的。这就是一个range分区的例子。 &lt;br /&gt;
&lt;code&gt;那为啥主键定义的是双主键呢?&lt;/code&gt; 因为分区键(score) 必须也是主键或者唯一键的一部分。&lt;/p&gt;
&lt;p&gt;Range分区的详细介绍请看&lt;a href="http://www.phpue.com/mysql/mysql-partition-range"&gt;Mysql 分区介绍(二) —— RANGE分区&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;2. LIST分区&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;LIST不同于RANGE分区, 每个分区必须被显式的定义, 每个分区是根据列值的成员在一组列表中的元素定义的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这说的有点乱, 还是直接看一个创建的例子吧&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;create table t2 (
    id int not null,
    uid int not null comment &amp;#39;用户id&amp;#39;,
    score int(3) not null default 0 comment &amp;#39;分数&amp;#39;,
    primary key(id, uid)
)
partition by list(uid) (
    partition p0 values in (1,3,5,7,9),
    partition p1 values in (2,4,6,8,10)
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;t2的分区键是uid, 有两个分区(这个很明显嘛), 如果uid in (1,3,5,7,9), 那么这条数据就会保存在p0中, 如果是2,4,6,8,10的话, 就会在p1中, 这就是LIST 分区&lt;/p&gt;
&lt;p&gt;Range分区的详细介绍请看&lt;a href="http://www.phpue.com/mysql/mysql-partition-list"&gt;Mysql 分区介绍(三) —— LIST分区&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;3. COLUMNS 分区&lt;/h3&gt;
&lt;p&gt;COLUMNS和以上两种是很不一样的, 这个是可以用多个分区键确定分区的。有两种方式, RANGE COLUMNS 和 LIST COLUMNS&lt;/p&gt;
&lt;h4&gt;1. RANGE COLUMNS 分区&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;类似RANGE 分区, 但是需要使用多个字段值定义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不太好理解... 还是看例子吧&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;create table t3 (
    a int,
    b int,
    c char(3),
    d int
)
PARTITION BY RANGE COLUMNS(a,d,c) (
PARTITION p0 VALUES LESS THAN (5,10,&amp;#39;ggg&amp;#39;),
PARTITION p1 VALUES LESS THAN (10,20,&amp;#39;mmm&amp;#39;),
PARTITION p2 VALUES LESS THAN (15,30,&amp;#39;sss&amp;#39;)
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分区键有多个, 并且都是范围的, 就是RANGE COLUMNS 分区&lt;/p&gt;
&lt;p&gt;RANGE COLUMNS分区的详细介绍请看&lt;a href="http://www.phpue.com/mysql/mysql-partition-range-columns"&gt;Mysql 分区介绍(四) —— RANGE COLUMNS分区&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;2. LIST COLUMNS 分区&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Mysql 5.6开始支持LIST COLUMNS分区, 可以开始使用多个列作为分区的键, 并且列的数据类型除了数字类型可以作为分区列; 你也可以使用字符串类型, DATE和DATETIME&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还是看例子吧&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE customers_1 (
    first_name VARCHAR(25),
    last_name VARCHAR(25),
    street_1 VARCHAR(30),
    street_2 VARCHAR(30),
    city VARCHAR(15),
    renewal DATE
)
PARTITION BY LIST COLUMNS(city) (
    PARTITION pRegion_1 VALUES IN(&amp;#39;Oskarshamn&amp;#39;, &amp;#39;Högsby&amp;#39;, &amp;#39;Mönsterås&amp;#39;),
    PARTITION pRegion_2 VALUES IN(&amp;#39;Vimmerby&amp;#39;, &amp;#39;Hultsfred&amp;#39;, &amp;#39;Västervik&amp;#39;),
    PARTITION pRegion_3 VALUES IN(&amp;#39;Nässjö&amp;#39;, &amp;#39;Eksjö&amp;#39;, &amp;#39;Vetlanda&amp;#39;),
    PARTITION pRegion_4 VALUES IN(&amp;#39;Uppvidinge&amp;#39;, &amp;#39;Alvesta&amp;#39;, &amp;#39;Växjo&amp;#39;)
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;LIST COLUMNS分区的详细介绍请看&lt;a href="http://www.phpue.com/mysql/mysql-partition-list-columns"&gt;Mysql 分区介绍(五) —— LIST COLUMNS分区&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;3. HASH分区&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使用分区键去确保数据可以均匀的分布在一个预先确定数字的分区上, 在hash分区中, 无需显式的指定分区&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE employees (
    id INT NOT NULL,
    fname VARCHAR(30),
    lname VARCHAR(30),
    hired DATE NOT NULL DEFAULT &amp;#39;1970-01-01&amp;#39;,
    separated DATE NOT NULL DEFAULT &amp;#39;9999-12-31&amp;#39;,
    job_code INT,
    store_id INT
)
PARTITION BY HASH(store_id)
PARTITIONS 4;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HASH分区的详细介绍请看&lt;a href="http://www.phpue.com/mysql/mysql-partition-hash"&gt;Mysql 分区介绍(六) —— HASH分区&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;4. KEY分区&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;key分区类似hash分区, 接受0个或多个列名, key分区的哈希函数由MySQL服务器提供。NDB集群使用md5()；使用其他存储引擎的表，服务器采用自己的内部的哈希函数是基于相同的算法password()。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE k1 (
    id INT NOT NULL PRIMARY KEY,
    name VARCHAR(20)
)
PARTITION BY KEY()
PARTITIONS 2;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;KEY分区的详细介绍请看&lt;a href="http://www.phpue.com/mysql/mysql-partition-key"&gt;Mysql 分区介绍(七) —— KEY分区&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;5. 子分区&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;子分区也称为复合分区, 在分区的基础上进一步进行分区的方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE ts (
id INT, purchased DATE
)
PARTITION BY RANGE( YEAR(purchased) )
SUBPARTITION BY HASH( TO_DAYS(purchased) )
SUBPARTITIONS 2 (
    PARTITION p0 VALUES LESS THAN (1990),
    PARTITION p1 VALUES LESS THAN (2000),
    PARTITION p2 VALUES LESS THAN MAXVALUE
);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;子分区的详细介绍请看&lt;a href="http://www.phpue.com/mysql/mysql-partition-subpartition"&gt;Mysql 分区介绍(八) —— 子分区&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>Mysql 分区介绍(六) —— HASH分区</title><link href="http://www.phpue.com/mysql/mysql-partition-hash.html" rel="alternate"></link><published>2017-10-02T00:00:00+08:00</published><updated>2017-10-02T00:00:00+08:00</updated><author><name>Prince</name></author><id>tag:www.phpue.com,2017-10-02:/mysql/mysql-partition-hash.html</id><summary type="html"></summary><content type="html"></content></entry><entry><title>Mysql 分区介绍(七) —— KEY分区</title><link href="http://www.phpue.com/mysql/mysql-partition-key.html" rel="alternate"></link><published>2017-10-02T00:00:00+08:00</published><updated>2017-10-02T00:00:00+08:00</updated><author><name>Prince</name></author><id>tag:www.phpue.com,2017-10-02:/mysql/mysql-partition-key.html</id><summary type="html"></summary><content type="html"></content></entry><entry><title>Mysql 分区介绍(三) —— LIST分区</title><link href="http://www.phpue.com/mysql/mysql-partition-list.html" rel="alternate"></link><published>2017-10-02T00:00:00+08:00</published><updated>2017-10-02T00:00:00+08:00</updated><author><name>Prince</name></author><id>tag:www.phpue.com,2017-10-02:/mysql/mysql-partition-list.html</id><summary type="html"></summary><content type="html"></content></entry><entry><title>Mysql 分区介绍(五) —— LIST COLUMNS分区</title><link href="http://www.phpue.com/mysql/mysql-partition-list-columns.html" rel="alternate"></link><published>2017-10-02T00:00:00+08:00</published><updated>2017-10-02T00:00:00+08:00</updated><author><name>Prince</name></author><id>tag:www.phpue.com,2017-10-02:/mysql/mysql-partition-list-columns.html</id><summary type="html"></summary><content type="html"></content></entry><entry><title>Mysql 分区介绍(九) —— 分区管理</title><link href="http://www.phpue.com/mysql/mysql-partition-manage.html" rel="alternate"></link><published>2017-10-02T00:00:00+08:00</published><updated>2017-10-02T00:00:00+08:00</updated><author><name>Prince</name></author><id>tag:www.phpue.com,2017-10-02:/mysql/mysql-partition-manage.html</id><summary type="html"></summary><content type="html"></content></entry><entry><title>Mysql 分区介绍(二) —— RANGE分区</title><link href="http://www.phpue.com/mysql/mysql-partition-range.html" rel="alternate"></link><published>2017-10-02T00:00:00+08:00</published><updated>2017-10-02T00:00:00+08:00</updated><author><name>Prince</name></author><id>tag:www.phpue.com,2017-10-02:/mysql/mysql-partition-range.html</id><summary type="html"></summary><content type="html"></content></entry><entry><title>Mysql 分区介绍(四) —— RANGE COLUMNS分区</title><link href="http://www.phpue.com/mysql/mysql-partition-range-columns.html" rel="alternate"></link><published>2017-10-02T00:00:00+08:00</published><updated>2017-10-02T00:00:00+08:00</updated><author><name>Prince</name></author><id>tag:www.phpue.com,2017-10-02:/mysql/mysql-partition-range-columns.html</id><summary type="html"></summary><content type="html"></content></entry><entry><title>Mysql 分区介绍(八) —— 子分区</title><link href="http://www.phpue.com/mysql/mysql-partition-subpartition.html" rel="alternate"></link><published>2017-10-02T00:00:00+08:00</published><updated>2017-10-02T00:00:00+08:00</updated><author><name>Prince</name></author><id>tag:www.phpue.com,2017-10-02:/mysql/mysql-partition-subpartition.html</id><summary type="html"></summary><content type="html"></content></entry><entry><title>pt-archiver 数据删除、迁移工具使用</title><link href="http://www.phpue.com/mysql/pt-archiver.html" rel="alternate"></link><published>2017-10-01T00:00:00+08:00</published><updated>2017-10-01T00:00:00+08:00</updated><author><name>Prince</name></author><id>tag:www.phpue.com,2017-10-01:/mysql/pt-archiver.html</id><summary type="html">&lt;h2&gt;1. 数据库连接参数&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;字符编码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;从文件读取选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;加载数据本地文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;socket文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;执行查询的数据库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;如果是true, 禁用SQL_LOG_BIN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;数据库地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;查询使用的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;插件模块名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;数据库密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;td&gt;表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;td&gt;用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;2. 常用参数&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;--limit 10000&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;每次取1000行数据用pt-archive处理，Number of rows to fetch and archive per statement …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;h2&gt;1. 数据库连接参数&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;字符编码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F&lt;/td&gt;
&lt;td&gt;从文件读取选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;L&lt;/td&gt;
&lt;td&gt;加载数据本地文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;socket文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;执行查询的数据库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;如果是true, 禁用SQL_LOG_BIN&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;数据库地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;查询使用的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;插件模块名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;数据库密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;td&gt;表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;td&gt;用户名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;2. 常用参数&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;默认值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;--limit 10000&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;每次取1000行数据用pt-archive处理，Number of rows to fetch and archive per statement.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--txn-size  1000&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;设置1000行为一个事务提交一次，Number of rows pertransaction.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--where 'id&amp;lt;3000'&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;设置操作条件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--progress 5000&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;每处理5000行输出一次处理信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--statistics&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;输出执行过程及最后的操作统计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--charset=UTF8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;指定字符集为UTF8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--bulk-delete&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;批量删除source上的旧数据(例如每次1000行的批量删除操作)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--bulk-insert&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;批量插入数据到dest主机 (看dest的general log发现它是通过在dest主机上LOAD DATA LOCAL INFILE插入数据的)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--replace&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;将insert into 语句改成replace写入到dest库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--sleep 120&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;每次归档了limit个行记录后的休眠120秒（单位为秒）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--file '/root/test.txt'&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;导出的文件路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--purge&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;删除source数据库的相关匹配记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--header&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;输入列名称到首行（和--file一起使用）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-no-check-charset&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;不指定字符集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--check-columns&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;检验dest和source的表结构是否一致，不一致自动拒绝执行（不加这个参数也行。默认就是执行检查的）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--no-check-columns&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;不检验dest和source的表结构是否一致，不一致也执行（会导致dest上的无法与source匹配的列值被置为null或者0）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--chekc-interval&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;默认1s检查一次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--local&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;不把optimize或analyze操作写入到binlog里面（防止造成主从延迟巨大）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--retries&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;超时或者出现死锁的话，pt-archiver进行重试的间隔（默认1s）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--no-version-check&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;目前为止，发现部分pt工具对阿里云RDS操作必须加这个参数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--analyze=ds&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;操作结束后，优化表空间（d表示dest，s表示source）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;2. example&lt;/h2&gt;
&lt;h3&gt;1. 删除老数据&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pt-archiver \
--source h=localhost,u=root,p=1234,P=3306,D=test,t=t \
--no-check-charset --where ‘a&amp;lt;=376‘ --limit 10000 --txn-size 1000 --purge
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. 复制数据到其他mysql实例，且不删除source的数据(指定字符集)：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/bin/pt-archiver \
--source h=localhost,u=root,p=1234,P=3306,D=test,t=t1\
--dest h=192.168.2.12,P=3306,u=archiver,p=archiver,D=test,t=t1_bak \
--progress 5000 --where &amp;#39;mc_id&amp;lt;=125&amp;#39; \
--statistics --charset=UTF8 --limit=10000 --txn-size 1000 --no-delete
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;3. 复制数据到其他mysql实例，并删source上的旧数据(指定字符集)：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/bin/pt-archiver \

--source h=localhost,u=root,p=1234,P=3306,D=test,t=t1 \

--dest h=192.168.2.12,P=3306,u=archiver,p=archiver,D=test,t=t1_his \

--progress 5000 --where &amp;quot;CreateDate &amp;lt;‘2017-05-01 00:00:00‘ &amp;quot; \

--statistics --charset=UTF8 --limit=10000 --txn-size 1000 --bulk-delete
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;4. 复制数据到其他mysql实例，不删除source数据，但是使用批量插入dest上新的数据(指定字符集)：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/bin/pt-archiver \

--source h=localhost,u=archiver,p=archiver,P=3306,D=test,t=t1 \

--dest h=192.168.2.12,P=3306,u=archiver,p=archiver,D=test,t=t1_his \

--progress 5000 --where &amp;quot;c &amp;lt;‘2017-05-01 00:00:00‘ &amp;quot; \

--statistics --charset=UTF8 --limit=10000 --txn-size 1000 --no-delete  --bulk-insert
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5. 导出数据到文件&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/bin/pt-archiver \

--source h=10.0.20.26,u=root,p=1234,P=3306,D=test,t=t \

--file ‘/root/test.txt‘ \

--progress 5000 --where ‘a&amp;lt;12000‘ \

--no-delete --statistics --charset=UTF8 --limit=10000 --txn-size 1000
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;6. 导出数据到文件并删除数据库的相关行：&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/bin/pt-archiver \

--source h=10.0.20.26,u=root,p=1234,P=3306,D=test,t=t \

--file ‘/root/test.txt‘ \

--progress 5000 --where ‘a&amp;lt;12000‘ \

--statistics --charset=UTF8 --limit=10000 --txn-size 1000 --purge
&lt;/pre&gt;&lt;/div&gt;</content></entry></feed>